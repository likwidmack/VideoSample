var playlistUrl = "http://data.nbcnews.com/drone/api/query/NBCNews/webapp/1.0/playlistbyid?" +
        "playlistid=giDDVYo81SY3&output=nbcnews", // default playlist
    playlistLimit = "",
    retryCounter = 1, // number of retry before presenting an error
    autoPlay = false,
    useCustomControlRack = false;

// playlist url from querystring
if (getQueryString('playlist')) {
    playlistUrl = getQueryString('playlist');
}
if (getQueryString('autoplay')) {
    autoPlay = getQueryString('autoplay') == "true" ? true : false;

}
if (getQueryString('limit')) {
    playlistLimit = "&count=" + getQueryString('limit');
}
if (getQueryString('playlistid')) {
    var playlistid = getQueryString('playlistid'),

        //newsAPIServer = "sys04-public.nbcnews.com"; // test server
        newsAPIServer = "data.nbcnews.com";  // uncomment when newsapi moves code to production
    playlistUrl = "http://" + newsAPIServer + "/drone/api/query/NBCNews/webapp/1.0/playlistbyid?playlistid=" + playlistid + playlistLimit;
}

if (getQueryString('useCustomControlRack')) {
    useCustomControlRack = ((getQueryString('useCustomControlRack')) == 'true');
}

// the getJson route is a nodeJS proxy which solves xdomain issues
if (playlistUrl.indexOf('http') > -1) {
    var getJson = function (retryCounter) {
        $.getJSON("/getAssets", {url: playlistUrl})
         .done(function (data) {
             var videos = convertToLegacyFormat(data.json);
             processVideoPlaylist(videos);
         })
         .fail(function (jqxhr, textStatus, error) {
             var err = {
                 url: playlistUrl,
                 status: textStatus,
                 error: error
             };
             if (retryCounter > 0) {
                 retryCounter--;
                 getJson(retryCounter);
             } else {
                 console.error("Playlist request failed:", err);
             }
         });
    };
    getJson(retryCounter);
} else {
// load legacy test JSONP object
    $.ajax({
        type: "GET",
        url: playlistUrl,
        async: false,
        cache: true,
        dataType: "script",
        crossDomain: true,
        error: function (xhr, textStatus, errorThrown) {
            $ndp.console.debug('error reading playlist');
            //alert(errorThrown);
        }
    });
}

function setCaptionSize(video) {
    var pdkFontSize = 0.4,
        isSnappy = false,
        isLive = video.videoType === 'Non Broadcast Live Video';

    if (!isLive) {
        isSnappy = $.grep(video.videoAssets, function (item) {
            return (item.assetType === 'Akamai Video');
        }).length;
    }

    if (isLive) {
        pdkFontSize = 3;
    } else if (isSnappy > 0) {
        pdkFontSize = 1;
    }

    window.$pdk.controller.setSubtitleStyle({
        globalDataType: 'com.theplatform.pdk.data::SubtitleStyle',
        fontSize: pdkFontSize,
        textAlign: 'left'
    });
}

function convertToLegacyFormat(data) {
    newdata = {'videos': []};
    $.each(data.results, function (i, val) {
        if (val.video) {
            newdata.videos.push(val.video);
        }
    });
    return newdata;
}

function getQueryString(key) {
    key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&");
    var match = location.search.match(new RegExp("[?&]" + key + "=([^&]+)(&|$)"));
    return match && decodeURIComponent(match[1].replace(/\+/g, " "));
}


function processVideoPlaylist(json) {
    var parentLocation = document.getElementById('playerOne');
    // Local instance copies of key NDP components we're going to leverage
    var MPXMediaAsset = $ndp.MPXMediaAsset;
    var SystemEvent = $ndp.events.SystemEvent;
    var PlaybackEvent = $ndp.events.PlaybackEvent;
    var AdEvent = $ndp.events.AdEvent;
    var playlist = new $ndp.Playlist();

    var myPlayer = parentLocation ? new NDPPlayer({location: parentLocation}) : new NDPPlayer();
    if (autoPlay) {
        myPlayer.dataStore.autoPlay = true;
    }
    // create refeference for console debuging
    window.myPlayer = myPlayer;

    parentLocation = parentLocation || document.getElementById($ndp.configuration.location);
    if (useCustomControlRack) var thisControlRack = new CustomControlRack(myPlayer);
    // This will set the default for NDP Player auto play to true. If
    // the video is capable of auto play (device dependent), then the
    // video will auto start.
    //                myPlayer.autoPlay(true);
    // The "*" character is a special character for adding an event listener
    // to all events coming from the NDP Player. This is a shortcut method to
    // capture all events being generated. Events are broken down into three
    // main types:
    //
    //  SystemEvent - Events generated by the system, such as Player Loaded, that
    //                  do not fall into the other two categories
    //
    //  PlaybackEvent - Events generated during content playback
    //
    //  AdEvent - Events generated during ad playback
    myPlayer.on("*", logEvents);
    // Here are direct assign events to the player.
    myPlayer.on(SystemEvent.PLAYER_LOADED, onPlayerLoaded);
    myPlayer.on(PlaybackEvent.START, onMediaStart);
    myPlayer.on(PlaybackEvent.VOLUME_CHANGE, onVolumeChange);
    myPlayer.on(PlaybackEvent.PROGRESS, onProgress);

    myPlayer.on(AdEvent.START, onMediaStart);
    myPlayer.on(AdEvent.PROGRESS, onProgress);
    myPlayer.on(AdEvent.VOLUME_CHANGE, onVolumeChange);
    /* Other ways to register events to NDP Player:
     *
     * Event Registration with Scope
     *
     *      Here we are able to register our listener to the event type, however
     *      we have asked that it be triggered under a specific scope type. This
     *      allows for scenarios where an instance object is being used to handle
     *      video player execution and eventing.
     *
     *      var myPlayer = new NDPPlayer(domElement);
     *      myPlayer.on(PlaybackEvent.PLAY, this.playbackHandler, this);
     *
     * Grouped registration
     *
     *      Instead of registering events one at a time, this method allows us to
     *      register a group of events with one method call. We can either call this
     *      method in a way that would invoke a USE 1 registration, or a special way
     *      to invoke a USE 2 registration.
     *
     *      Invoking USE 1:
     *
     *          var myPlayer = new NDPPlayer(domElement);
     *          myPlayer.on({
     *              PlaybackEvent.PLAY, playbackHandler,
     *              PlaybackEvent.STOP, stopHandler,
     *              PlaybackEvent.PAUSE, pauseHandler
     *          });
     *
     *      Invoking USE 2:
     *
     *          var myPlayer = new NDPPlayer(domElement);
     *          myPlayer.on({
     *              PlaybackEvent.PLAY, {
     *                  scope: this,
     *                  listener: this.playbackHandler
     *              },
     *              PlaybackEvent.STOP, {
     *                  scope: this,
     *                  listener: this.stopHandler
     *              },
     *              PlaybackEvent.PAUSE, {
     *                  scope: this,
     *                  listener: this.pauseHandler
     *              }
     *          });
     *
     */
    function onPlayerLoaded(e) {
        //$('.container_wrapper').on('click', 'img.videoTease', onRestStateClick);
        $('#apiBtns button').prop('disabled', false);
        if (typeof $pdk !== 'undefined') {
            $('#playerVersion').html('PDK v' + $ndp.configuration.pdk.source.version + ' Skin ' + $ndp.configuration.pdk.skin.version);
        }
    }

    function onMediaStart(e) {
        if (window.$pdk) setCaptionSize(myPlayer.dataStore.mediaAsset.raw);

        $('.videoTease', myPlayer.dataStore.location).hide();
        $('.videoLoadOverlay:visible').fadeOut();

        $('#readVolume').text(+(e.payload.volume * 100 || 0).toFixed(2));
        $('#readScrub').text(e.payload.playheadPosition);
    }

    function onMediaComplete(e) {
        var parentContainer = myPlayer.location();
        $('.videoTease', parentContainer).fadeIn(200);

        $('#readVolume').text(+(e.payload.volume * 100 || 0).toFixed(2));
        $('#readScrub').text(e.payload.playheadPosition);
    }

    function onVolumeChange(e) {
        $('#readVolume').text(+(e.payload.volume * 100 || 0).toFixed(2));
    }

    function onProgress(e) {
        $('#readScrub').text(e.payload.playheadPosition);
    }

    function onRestStateClick(e) {
        //e.stopPropagation();
        var obj = $(this).parent(),
            status = ($('#playerEvents').text()).split('_')[1];
        //if (status === 'AdEvent') return true;
        // We can call .play() on the NDP Player instance and pass in the
        // MediaAsset we want to load in. This is simply a shorthand for:
        //
        //  myPlayer.mediaAsset(myMediaAsset);
        //  myPlayer.play();
        //
        // Both will do the same thing.
        if (!myPlayer.autoPlay()) {
            $('.videoTease', obj).hide();
            myPlayer.play(obj.data('videoMetaData'));
            $('.videoLoadOverlay', obj).fadeIn();
        } else {
            myPlayer.play();
        }
    }

    $(function () {
        logEvents({type: 'OnDocumentReady'});
        $('#apiBtns button').prop('disabled', true);

        $.each(json.videos, function (i, val) {
            // Creates a new MediaAsset instance that is required by the NDP Player. This
            // instance of MediaAsset is an extension, MPXMediaAsset, which allows for
            // an MPX data request to be directly passed in and parsed by the Asset object.
            // These objects are important, as they allow us to abstract away business-group
            // specific playlist details from core functionality.
            //
            // NOTE: MPXMediaAsset does not live on the root. Note at the top of this script
            // definition that we locally assign to this variable from the $ndp object, like this:
            //
            //      var MPXMediaAsset = $ndp.MPXMediaAsset;
            //
            // You can also create a new instance like this:
            //
            //      var asset = new $ndp.MPXMediaAsset(JSON);
            //
            // PERFORMANCE TIP: Lookup time for the MPXMediaAsset is greatly improved under
            // scenarios where you need to use the object definition numerous times by maintaining
            // a local copy.

            // Identify snappy content and highlight thumbnail
            var captionType = "none";
            if (val.captionLinks && val.captionLinks['web-vtt']) {
                if (val.captionLinks['web-vtt'].indexOf('snappy') > 0) {
                    captionType = "snappy";
                } else {
                    captionType = "nbc";
                }
            }

            var videoMetaData = new MPXMediaAsset(val);
            playlist.add(videoMetaData);

            if (!myPlayer.autoPlay()) {
                var li = $('<li class="' + captionType + '">').data('videoMetaData', videoMetaData);
                // use AIMS
                var thumbnail = videoMetaData.getRawData().thumbnail.replace('.jpg', '.video_146x97.jpg').replace('/i/', '/j/');
                var img = $('<img>').attr('src', thumbnail)
                img.appendTo(li);
                $('ul.thumbnails').append(li);

                li.on('click', 'img', onRestStateClick);
            }
        });


        if (myPlayer.autoPlay()) {
            $(parentLocation).data('videoMetaData', playlist.first());
            myPlayer.on(PlaybackEvent.PLAYLIST_COMPLETE, onMediaComplete);
            myPlayer.mediaAsset(playlist);
            $('.videoTease').on('click', onRestStateClick);
        } else {
            myPlayer.on(PlaybackEvent.COMPLETE, onMediaComplete);
        }
        // use AIMS
        var restState = playlist.first().getRawData().thumbnail.replace('.jpg', '.video_640x360.jpg').replace('/i/', '/j/');
        $(parentLocation).find('.videoTease').attr('src', restState);

        $('#play').on('click', function () {
            if (!$('.videoTease').is(':hidden')) {
                $('.videoTease').first().click();
            } else {
                myPlayer.play();
            }
            logEvents({type: 'Play_Interface_Button'});
        });
        $('#pause').on('click', function () {
            myPlayer.pause();
            logEvents({type: 'Pause_Interface_Button'});
        });
        $('#next').on('click', function () {
            var asset = playlist.next() || playlist.first();
            myPlayer.play(asset);
            logEvents({type: 'Next_Interface_Button'});
        });
        $('#update').on('click', function () {
            myPlayer.id('ndp' + new Date().getTime());
            logEvents({type: 'OnIdUpdate', message: 'NDPplayer Id has been updated: ' + myPlayer.id()});
        });
        $('#clearLog').on('click', function () {
            $('#outputLog ol').empty();
        });

        $('#apiFullscreen').on('click', function () {
            myPlayer.fullscreen(true);
        });
        $('#apiFullscreenExit').on('click', function () {
            setTimeout(function () {myPlayer.fullscreen(false);}, 10000);
        });


        $('#apiTimeConfig').on('change', function (e) {
            var timeConfig = $(this).val();
            console.log($ndp);
            $ndp.configuration.freewheel.requestTimeout = timeConfig;
            //$ndp.console.log(volFloat);
            //myPlayer.volume(volFloat);
        });


        $('#apiVolume').on('change', function (e) {
            var vol = $(this).val();
            var volFloat = (+vol) / 100;
            $ndp.console.log(volFloat);
            myPlayer.volume(volFloat);
        });

        $('#apiScrub').on('change', function () {
            var val = parseInt($(this).val()) / 100;
            $ndp.console.log(val);
            myPlayer.scrub(val);
        });

        $('#apiCC').on('change', function (e) {
            var val = e.target.checked;//Boolean($(this).val());
            $ndp.console.log(e);
            $('#readCC').text(myPlayer.caption(val));
        });
    });
    function endApp() {
        myPlayer.destroy();
    }
}
